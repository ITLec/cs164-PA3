/*
 * cool.cup
 *
 * CS164: Spring 2004 
 * Programming Assignment 3
 *
 * Parser definition for the Cool language.
 *
 */

import java_cup.runtime.*;

/* Code enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

:} 

/************************************************************************/
/*                DON'T CHANGE ANYTHING IN THIS SECTION                 */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}


/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */
terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WON'T WORK      */
/**************************************************************************/


/*
 * Declare types for the grammar's non-terminals.
 *
 * Hint: You will have to add/modify this list.
 */
nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features optional_feature_list;
nonterminal Feature feature;
nonterminal Expression expr, let_expr;
nonterminal Expressions actuals, exp_list, block_list;
nonterminal Formals formal_list;
nonterminal formalc formal;
nonterminal Cases cases;

/*
 * Precedence declarations.
 */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc EQ,LT,LE;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

/***********************************************************************
 * Grammar rules.                                                      *
 *                                                                     *
 * Some parts of rules have been provided for you as an example and    *
 * to get you started.  You should not need to modify this code to get *
 * a working solution, but you are welcome to if you like.  However,   *
 * do not assume that any particular rule is complete.                 *
 ***********************************************************************/

/* Program */
program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
	| error
	    {: RESULT = new programc(curr_lineno(),
                                     new Classes(curr_lineno())); :}
        ;


class_list
	/* single class */
	::= class:c SEMI
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c SEMI
	    {: RESULT = cl.appendElement(c); :}
	| class_list:cl error SEMI
		{: RESULT = cl; :}
	| error SEMI
		{: RESULT = new Classes(curr_lineno()); :}
	;


/* Class declarations
 *
 * If no parent is specified, the class inherits from the Object class.
 */
class
	::= CLASS TYPEID:n LBRACE optional_feature_list:f RBRACE
	    {: RESULT = new class_c(curr_lineno(), n, 
		                    AbstractTable.idtable.addString("Object"), 
				    f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE optional_feature_list:f RBRACE
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	;


optional_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	| feature:f SEMI
		{: RESULT = (new Features(curr_lineno())).appendElement(f); :}
	| optional_feature_list:l feature:f SEMI
		{: RESULT = l.appendElement(f); :}
	| optional_feature_list:l error SEMI
		{: RESULT = l; :}
	| error SEMI
		{: RESULT = new Features(curr_lineno()); :}
	;

feature
	::= OBJECTID:o LPAREN formal_list:fl RPAREN COLON TYPEID:n LBRACE expr:e RBRACE
		{: RESULT = new method(curr_lineno(), o, fl, n, e); :}
	| OBJECTID:o COLON TYPEID:n ASSIGN expr:e
		{: RESULT = new attr(curr_lineno(), o, n, e); :}
	| OBJECTID:o COLON TYPEID:n
		{: RESULT = new attr(curr_lineno(), o, n, new no_expr(curr_lineno())); :}
	;

formal_list
	::= /* empty */
		{: RESULT = new Formals(curr_lineno()); :}
	| formal:f
		{: RESULT = new Formals(curr_lineno()).appendElement(f); :}
	| formal_list:l COMMA formal:f
		{: RESULT = l.appendElement(f); :}
	| formal_list:l error COMMA
		{: RESULT = l; :}
	| error COMMA
		{: RESULT = new Formals(curr_lineno()); :}
	;

formal
	::= OBJECTID:o COLON TYPEID:n
		{: RESULT = new formalc(curr_lineno(), o, n); :}
	;

/* Expressions */
expr
	::= expr:e1 PLUS expr:e2
	    {: RESULT = new plus(curr_lineno(), e1, e2); :}
	| expr:e1 MINUS expr:e2
	    {: RESULT = new sub(curr_lineno(), e1, e2); :}
	| expr:e1 MULT expr:e2
	    {: RESULT = new mul(curr_lineno(), e1, e2); :}
	| expr:e1 DIV expr:e2
	    {: RESULT = new divide(curr_lineno(), e1, e2); :}
	| NEG expr:e
	    {: RESULT = new neg(curr_lineno(), e); :}
	| expr:e1 LT expr:e2
	    {: RESULT = new lt(curr_lineno(), e1, e2); :}
	| expr:e1 EQ expr:e2
	    {: RESULT = new eq(curr_lineno(), e1, e2); :}
	| expr:e1 LE expr:e2
	    {: RESULT = new leq(curr_lineno(), e1, e2); :}
	| NOT expr:e
	    {: RESULT = new comp(curr_lineno(), e); :}
	| LPAREN expr:e RPAREN
	    {: RESULT = e; :}
	| INT_CONST:i
	    {: RESULT = new int_const(curr_lineno(), i); :}
	| STR_CONST:s
	    {: RESULT = new string_const(curr_lineno(), s); :}
	| BOOL_CONST:b
	    {: RESULT = new bool_const(curr_lineno(), b); :}
	| OBJECTID:o
	    {: RESULT = new object(curr_lineno(), o); :}

	/* shorthand for self.<id>(<expr>) */
	| OBJECTID:n actuals:a
	    {: RESULT = new dispatch(curr_lineno(),
	                             new object(curr_lineno(), 
	                                        AbstractTable.idtable.addString("self")),
				     n, a); :}
	/* isvoid expression */
	| ISVOID expr:e
		{: RESULT = new isvoid(curr_lineno(), e); :}

	/* New expression */
	| NEW TYPEID:n
		{: RESULT = new new_(curr_lineno(), n); :}

	/* While loop */
	| WHILE expr:e1 LOOP expr:e2 POOL
		{: RESULT = new loop(curr_lineno(), e1, e2); :}

	/* IF statement */
	| IF expr:e1 THEN expr:e2 ELSE expr:e3 FI
		{: RESULT = new cond(curr_lineno(), e1, e2, e3); :}

	/* Assignment */
	| OBJECTID:o ASSIGN expr:e
		{: RESULT = new assign(curr_lineno(), o, e); :}

	/* Case expression */
	| CASE expr:e OF cases:c ESAC
		{: RESULT = new typcase(curr_lineno(), e, c); :}

	/* Let expression */
	| LET let_expr:le
		{: RESULT = le; :}

	/* Block expression */
	| LBRACE block_list:bl RBRACE
		{: RESULT = new block(curr_lineno(), bl); :}

	| expr:e DOT OBJECTID:o actuals:a
		{: RESULT = new dispatch(curr_lineno(), e, o, a); :}

	/* Static dispatch */
	| expr:e AT TYPEID:n DOT OBJECTID:o actuals:a
		{: RESULT = new static_dispatch(curr_lineno(), e, n, o, a); :}
    ;


/* Method arguments */
actuals
        /* No arguments */
	::= LPAREN RPAREN
	    {: RESULT = new Expressions(curr_lineno()); :}
        /* List of arguments */
	| LPAREN exp_list:el RPAREN
	    {: RESULT = el; :}
	;


/* Non-empty list of expressions */
exp_list
        /* One expression */
	::= expr:e
	    {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :} 
        /* Several expressions */
	| exp_list:el COMMA expr:e
	    {: RESULT = el.appendElement(e); :}
	;

/* List of expressions in a block statement */
block_list
	/* One expression */
	::= expr:e SEMI
		{: RESULT = (new Expressions(curr_lineno()).appendElement(e)); :}
	/* Several expressions */
	| block_list:bl expr:e SEMI
		{: RESULT = bl.appendElement(e); :}
	| error SEMI
		{: RESULT = new Expressions(curr_lineno()); :}
	| block_list:bl error SEMI
		{: RESULT = bl; :}
	;

/* Let expression variations */
let_expr
	/* Let expression with no assignment or additional vars */
	::= OBJECTID:o COLON TYPEID:n IN expr:e
		{: RESULT = new let(curr_lineno(), o, n, new no_expr(curr_lineno()), e); :}

	/* Let expression with no additional vars; has assignment */
	| OBJECTID:o COLON TYPEID:n ASSIGN expr:e1 IN expr:e2
		{: RESULT = new let(curr_lineno(), o, n, e1, e2); :}

	/* Let expression with no assignment; has additional vars*/
	| OBJECTID:o COLON TYPEID:n COMMA let_expr:le
		{: RESULT = new let(curr_lineno(), o, n, new no_expr(curr_lineno()), le); :}

	/* Let expression with both assignment and additional vars */
	| OBJECTID:o COLON TYPEID:n ASSIGN expr:e COMMA let_expr:le
		{: RESULT = new let(curr_lineno(), o, n, e, le); :}

	| error COMMA let_expr:le
		{: RESULT = le; :}
	;

/* Case branches */
cases
	::= OBJECTID:o COLON TYPEID:n DARROW expr:e SEMI
		{: RESULT = new Cases(curr_lineno()).appendElement(new branch(curr_lineno(), o, n, e)); :}
	| cases:c OBJECTID:o COLON TYPEID:n DARROW expr:e SEMI
		{: RESULT = c.appendElement(new branch(curr_lineno(), o, n, e)); :}
	;
